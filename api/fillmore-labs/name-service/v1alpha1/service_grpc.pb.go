// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: fillmore_labs/name_service/v1alpha1/service.proto

package v1alpha1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	NameService_AddName_FullMethodName   = "/fillmore_labs.name_service.v1alpha1.NameService/AddName"
	NameService_ListNames_FullMethodName = "/fillmore_labs.name_service.v1alpha1.NameService/ListNames"
)

// NameServiceClient is the client API for NameService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NameServiceClient interface {
	// TBD.
	AddName(ctx context.Context, in *AddNameRequest, opts ...grpc.CallOption) (*AddNameResponse, error)
	// TBD.
	ListNames(ctx context.Context, in *ListNamesRequest, opts ...grpc.CallOption) (NameService_ListNamesClient, error)
}

type nameServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNameServiceClient(cc grpc.ClientConnInterface) NameServiceClient {
	return &nameServiceClient{cc}
}

func (c *nameServiceClient) AddName(ctx context.Context, in *AddNameRequest, opts ...grpc.CallOption) (*AddNameResponse, error) {
	out := new(AddNameResponse)
	err := c.cc.Invoke(ctx, NameService_AddName_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nameServiceClient) ListNames(ctx context.Context, in *ListNamesRequest, opts ...grpc.CallOption) (NameService_ListNamesClient, error) {
	stream, err := c.cc.NewStream(ctx, &NameService_ServiceDesc.Streams[0], NameService_ListNames_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &nameServiceListNamesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NameService_ListNamesClient interface {
	Recv() (*ListNamesResponse, error)
	grpc.ClientStream
}

type nameServiceListNamesClient struct {
	grpc.ClientStream
}

func (x *nameServiceListNamesClient) Recv() (*ListNamesResponse, error) {
	m := new(ListNamesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// NameServiceServer is the server API for NameService service.
// All implementations must embed UnimplementedNameServiceServer
// for forward compatibility
type NameServiceServer interface {
	// TBD.
	AddName(context.Context, *AddNameRequest) (*AddNameResponse, error)
	// TBD.
	ListNames(*ListNamesRequest, NameService_ListNamesServer) error
	mustEmbedUnimplementedNameServiceServer()
}

// UnimplementedNameServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNameServiceServer struct {
}

func (UnimplementedNameServiceServer) AddName(context.Context, *AddNameRequest) (*AddNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddName not implemented")
}
func (UnimplementedNameServiceServer) ListNames(*ListNamesRequest, NameService_ListNamesServer) error {
	return status.Errorf(codes.Unimplemented, "method ListNames not implemented")
}
func (UnimplementedNameServiceServer) mustEmbedUnimplementedNameServiceServer() {}

// UnsafeNameServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NameServiceServer will
// result in compilation errors.
type UnsafeNameServiceServer interface {
	mustEmbedUnimplementedNameServiceServer()
}

func RegisterNameServiceServer(s grpc.ServiceRegistrar, srv NameServiceServer) {
	s.RegisterService(&NameService_ServiceDesc, srv)
}

func _NameService_AddName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NameServiceServer).AddName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NameService_AddName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NameServiceServer).AddName(ctx, req.(*AddNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NameService_ListNames_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListNamesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NameServiceServer).ListNames(m, &nameServiceListNamesServer{stream})
}

type NameService_ListNamesServer interface {
	Send(*ListNamesResponse) error
	grpc.ServerStream
}

type nameServiceListNamesServer struct {
	grpc.ServerStream
}

func (x *nameServiceListNamesServer) Send(m *ListNamesResponse) error {
	return x.ServerStream.SendMsg(m)
}

// NameService_ServiceDesc is the grpc.ServiceDesc for NameService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NameService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fillmore_labs.name_service.v1alpha1.NameService",
	HandlerType: (*NameServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddName",
			Handler:    _NameService_AddName_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListNames",
			Handler:       _NameService_ListNames_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "fillmore_labs/name_service/v1alpha1/service.proto",
}
